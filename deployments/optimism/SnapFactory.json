{
  "address": "0xd993bCcd68785ae7a03db04E8c1344511d14695d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_snapAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mintEndsTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_visibleEndsTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SnapMade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ISnapCore.ContractURI",
          "name": "_contractURI",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_tokenImageURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_snapImageURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_mintFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "createSnap",
      "outputs": [
        {
          "internalType": "address",
          "name": "snapAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getActiveByCreator",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "snaps",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveSnaps",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "snaps",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getVisibleByCreator",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "snaps",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVisibleSnaps",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "snaps",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snap",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snap",
          "type": "address"
        }
      ],
      "name": "isVisible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "visible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x443dec3d97fac71416e7a8549a060fc9f952edefab8ef750c91459d61ba2f066",
  "receipt": {
    "to": null,
    "from": "0xd61FA937b8f237901D354f48f6b14995fE468bF2",
    "contractAddress": "0xd993bCcd68785ae7a03db04E8c1344511d14695d",
    "transactionIndex": 0,
    "gasUsed": "3966309",
    "logsBloom": "0x
    "blockHash": "0x4d41bd8fcd4fcca3ece43b92a0840ab8884be548d1b28743137f52062b1b7e28",
    "transactionHash": "0x443dec3d97fac71416e7a8549a060fc9f952edefab8ef750c91459d61ba2f066",
    "logs": [],
    "blockNumber": 81238091,
    "cumulativeGasUsed": "3966309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cda4a75c91c6f2020bc1cfbf4880fb93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_snapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintEndsTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_visibleEndsTimestamp\",\"type\":\"uint256\"}],\"name\":\"SnapMade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ISnapCore.ContractURI\",\"name\":\"_contractURI\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_tokenImageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_snapImageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_mintFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"createSnap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"snapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getActiveByCreator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"snaps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSnaps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"snaps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getVisibleByCreator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"snaps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVisibleSnaps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"snaps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snap\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snap\",\"type\":\"address\"}],\"name\":\"isVisible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SnapFactory.sol\":\"SnapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MintableERC721Snap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"./utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ISnapCore } from \\\"./interfaces/ISnapCore.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract MintableERC721Snap is ERC721, Ownable, ReentrancyGuard {\\n  uint256 public constant MINT_LENGTH = 1 days;\\n\\n  uint256 public constant VISIBLE_LENGTH = 2 days;\\n\\n  uint256 public immutable MINT_ENDS;\\n\\n  uint256 public immutable VISIBLE_ENDS;\\n\\n  string private TOKEN_IMAGE_URL;\\n\\n  string private SNAP_IMAGE_URL;\\n\\n  string private NAME;\\n\\n  string private SYMBOL;\\n\\n  /// @notice Mint Fee\\n  uint256 private immutable MINT_FEE;\\n\\n  /// @notice Mint Fee Recipient\\n  address payable private immutable MINT_FEE_RECIPIENT;\\n\\n  /// @notice Creator address\\n  address payable private immutable CREATOR_ADDRESS;\\n\\n  /// @notice Sale price\\n  uint256 private salePrice;\\n\\n  ISnapCore.ContractURI private contractURIData;\\n\\n  /// @notice ID counter for ERC721 tokens\\n  uint256 private idCounter;\\n\\n  constructor(\\n    string memory _name_,\\n    string memory _symbol_,\\n    ISnapCore.ContractURI memory _contractURI_,\\n    string memory _tokenImageURL_,\\n    string memory _snapImageURL_,\\n    uint256 _mintFee_,\\n    address payable _mintFeeRecipient_,\\n    address payable _creator_,\\n    uint256 _salePrice_\\n  ) ERC721(_name_, _symbol_) {\\n    NAME = _name_;\\n    SYMBOL = _symbol_;\\n\\n    contractURIData = _contractURI_;\\n    TOKEN_IMAGE_URL = _tokenImageURL_;\\n    SNAP_IMAGE_URL = _snapImageURL_;\\n\\n    MINT_ENDS = block.timestamp + MINT_LENGTH;\\n    VISIBLE_ENDS = block.timestamp + VISIBLE_LENGTH;\\n\\n    MINT_FEE = _mintFee_;\\n    MINT_FEE_RECIPIENT = _mintFeeRecipient_;\\n\\n    CREATOR_ADDRESS = _creator_;\\n\\n    transferOwnership(_creator_);\\n\\n    salePrice = _salePrice_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* EIP Functions                                                                         */\\n  /* ===================================================================================== */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function contractURI() external view returns (string memory uri) {\\n    if (_isVisible()) {\\n      return _constructContractMeta();\\n    } else {\\n      return _constructSnapContractMeta();\\n    }\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    return idCounter;\\n  }\\n\\n  function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n    if (_isVisible()) {\\n      return _constructTokenMeta(_tokenId);\\n    } else {\\n      return _constructSNAPTokenMeta(_tokenId);\\n    }\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    if (_isVisible()) {\\n      return NAME;\\n    } else {\\n      return \\\"Expired NFT Snap\\\";\\n    }\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    if (_isVisible()) {\\n      return SYMBOL;\\n    } else {\\n      return \\\"NFTSNAP\\\";\\n    }\\n  }\\n\\n  function isMintActive() external view returns (bool active) {\\n    return _isMintActive();\\n  }\\n\\n  function isVisible() external view returns (bool visible) {\\n    return _isVisible();\\n  }\\n\\n  function getSalePrice() external view returns (uint256 price) {\\n    return salePrice;\\n  }\\n\\n  function getMintFee() external view returns (uint256 fee) {\\n    return MINT_FEE;\\n  }\\n\\n  function get() external view returns (ISnapCore.SnapDetails memory snapDetails) {\\n    if (_isVisible()) {\\n      return\\n        ISnapCore.SnapDetails(\\n          contractURIData.name,\\n          contractURIData.description,\\n          contractURIData.image,\\n          contractURIData.externalLink,\\n          contractURIData.sellerFeeBasisPoints,\\n          contractURIData.feeRecipient,\\n          CREATOR_ADDRESS,\\n          salePrice,\\n          MINT_ENDS,\\n          VISIBLE_ENDS\\n        );\\n    }\\n  }\\n\\n  // ========================\\n  // WRITES\\n  // ========================\\n\\n  /**\\n   * @notice Mints a new token to the given address\\n   * @param _to address - Address to mint to`\\n   */\\n  function mint(address _to) external payable nonReentrant returns (uint256) {\\n    require(_isMintActive(), \\\"NFTSnap:minting-ended\\\");\\n    require(msg.value >= (salePrice + MINT_FEE), \\\"NFTSnap:insufficient-amount\\\");\\n\\n    uint256 nextId_ = ++idCounter;\\n    _mint(_to, nextId_);\\n\\n    _payoutMintFee();\\n\\n    return nextId_;\\n  }\\n\\n  /**\\n   * @notice Permissionless token burn after visibility ends\\n   * @param _tokenId uint256 - Token ID to burn\\n   */\\n  function burn(uint256 _tokenId) external {\\n    require(!_isVisible(), \\\"NFTSnap:unauthorized-burn\\\");\\n    _burn(_tokenId);\\n    --idCounter;\\n  }\\n\\n  /**\\n   * @notice Sets a new Sale Price\\n   * @param _salePrice uint256 - Sale Price\\n   */\\n  function setSalePrice(uint256 _salePrice) external onlyOwner {\\n    salePrice = _salePrice;\\n  }\\n\\n  /**\\n   * @notice Withdraws funds to creator\\n   */\\n  function withdraw() external onlyOwner {\\n    uint256 funds_ = address(this).balance;\\n    (bool _success, ) = CREATOR_ADDRESS.call{ value: funds_ }(\\\"\\\");\\n    require(_success, \\\"NFTSnap:funds-release-failed\\\");\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n  function _payoutMintFee() internal {\\n    (bool _success, ) = MINT_FEE_RECIPIENT.call{ value: MINT_FEE }(\\\"\\\");\\n    require(_success, \\\"NFTSnap:mint-fee-release-failed\\\");\\n  }\\n\\n  function _isMintActive() internal view returns (bool) {\\n    return block.timestamp < MINT_ENDS;\\n  }\\n\\n  function _isVisible() internal view returns (bool) {\\n    return block.timestamp < VISIBLE_ENDS;\\n  }\\n\\n  function _constructTokenMeta(uint256 _tokenId) internal view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                string.concat(contractURIData.name, \\\" \\\", Strings.toString(_tokenId)),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                contractURIData.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                TOKEN_IMAGE_URL,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _constructSNAPTokenMeta(uint256 _tokenId) internal view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                Strings.toString(_tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                \\\"???\\\",\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                SNAP_IMAGE_URL,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _constructContractMeta() internal view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                contractURIData.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                contractURIData.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                contractURIData.image,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                contractURIData.externalLink,\\n                '\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                contractURIData.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                contractURIData.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _constructSnapContractMeta() internal view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                'Expired NFT Snap\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                '???\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                SNAP_IMAGE_URL,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                'https://nftsnaps.xyz/\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                contractURIData.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                contractURIData.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xc4514e5bfed9b89a62656926afc27f657a7b193317dc25c6cdf0829421b90680\",\"license\":\"MIT\"},\"contracts/SnapFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { ISnapFactory } from \\\"./interfaces/ISnapFactory.sol\\\";\\nimport { ISnapCore } from \\\"./interfaces/ISnapCore.sol\\\";\\nimport { MintableERC721Snap } from \\\"./MintableERC721Snap.sol\\\";\\n\\ncontract SnapFactory is ISnapFactory {\\n  uint256 private constant MIN_FEE = 9200 gwei;\\n\\n  /// @notice mapping of all created snaps\\n  mapping(address => bool) private snapsMap;\\n\\n  /// @notice list of all created snaps\\n  address[] private snapsList;\\n\\n  function createSnap(\\n    string memory _name,\\n    string memory _symbol,\\n    ISnapCore.ContractURI memory _contractURI,\\n    string memory _tokenImageURL,\\n    string memory _snapImageURL,\\n    uint256 _mintFee,\\n    address payable _mintFeeRecipient,\\n    address payable _creator,\\n    uint256 _salePrice\\n  ) external returns (address snapAddress) {\\n    require(_mintFee >= MIN_FEE, \\\"SnapFactory:Mint-fee-too-low\\\");\\n\\n    MintableERC721Snap snap_ = new MintableERC721Snap(\\n      _name,\\n      _symbol,\\n      _contractURI,\\n      _tokenImageURL,\\n      _snapImageURL,\\n      _mintFee,\\n      _mintFeeRecipient,\\n      _creator,\\n      _salePrice\\n    );\\n\\n    snapsMap[address(snap_)] = true;\\n    snapsList.push(address(snap_));\\n\\n    emit SnapMade(address(snap_), _creator, snap_.MINT_ENDS(), snap_.VISIBLE_ENDS());\\n\\n    return address(snap_);\\n  }\\n\\n  function getActiveSnaps() external view returns (address[] memory snaps) {\\n    address[] memory tempSnaps_ = new address[](snapsList.length);\\n\\n    uint256 index_ = 0;\\n    for (uint256 i = 0; i < snapsList.length; i++) {\\n      if (MintableERC721Snap(snapsList[i]).isMintActive()) {\\n        tempSnaps_[index_++] = snapsList[i];\\n      }\\n    }\\n\\n    snaps = new address[](index_);\\n\\n    for (uint16 j = 0; j < index_; j++) {\\n      snaps[j] = tempSnaps_[j];\\n    }\\n  }\\n\\n  function getVisibleSnaps() external view returns (address[] memory snaps) {\\n    address[] memory tempSnaps_ = new address[](snapsList.length);\\n\\n    uint256 index_ = 0;\\n    for (uint256 i = 0; i < snapsList.length; i++) {\\n      if (MintableERC721Snap(snapsList[i]).isVisible()) {\\n        tempSnaps_[index_++] = snapsList[i];\\n      }\\n    }\\n\\n    snaps = new address[](index_);\\n\\n    for (uint16 j = 0; j < index_; j++) {\\n      snaps[j] = tempSnaps_[j];\\n    }\\n  }\\n\\n  function getActiveByCreator(address _creator) external view returns (address[] memory snaps) {\\n    address[] memory tempSnaps_ = new address[](snapsList.length);\\n\\n    uint256 index_ = 0;\\n    for (uint256 i = 0; i < snapsList.length; i++) {\\n      if (\\n        MintableERC721Snap(snapsList[i]).owner() == _creator &&\\n        MintableERC721Snap(snapsList[i]).isMintActive()\\n      ) {\\n        tempSnaps_[index_++] = snapsList[i];\\n      }\\n    }\\n\\n    snaps = new address[](index_);\\n\\n    for (uint16 j = 0; j < index_; j++) {\\n      snaps[j] = tempSnaps_[j];\\n    }\\n  }\\n\\n  function getVisibleByCreator(address _creator) external view returns (address[] memory snaps) {\\n    address[] memory tempSnaps_ = new address[](snapsList.length);\\n\\n    uint256 index_ = 0;\\n    for (uint256 i = 0; i < snapsList.length; i++) {\\n      if (\\n        MintableERC721Snap(snapsList[i]).owner() == _creator &&\\n        MintableERC721Snap(snapsList[i]).isVisible()\\n      ) {\\n        tempSnaps_[index_++] = snapsList[i];\\n      }\\n    }\\n\\n    snaps = new address[](index_);\\n\\n    for (uint16 j = 0; j < index_; j++) {\\n      snaps[j] = tempSnaps_[j];\\n    }\\n  }\\n\\n  function isActive(address _snap) external view returns (bool active) {\\n    return snapsMap[_snap] && MintableERC721Snap(_snap).isMintActive();\\n  }\\n\\n  function isVisible(address _snap) external view returns (bool visible) {\\n    return snapsMap[_snap] && MintableERC721Snap(_snap).isVisible();\\n  }\\n}\\n\",\"keccak256\":\"0xa55ee67b62318793e52a626009ca2683825cc781e356dc8d3cbafe594e8a936d\",\"license\":\"MIT\"},\"contracts/interfaces/ISnapCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISnapCore {\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n  }\\n\\n  struct SnapDetails {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n    address creator;\\n    uint256 salePrice;\\n    uint256 mintEndTime;\\n    uint256 visibleEndTime;\\n  }\\n}\\n\",\"keccak256\":\"0x5f702394b09d94b10b9def2425a061156c30a48e65c855ec09916e22943489bd\",\"license\":\"MIT\"},\"contracts/interfaces/ISnapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { ISnapCore } from \\\"./ISnapCore.sol\\\";\\n\\ninterface ISnapFactory {\\n  event SnapMade(\\n    address indexed _snapAddress,\\n    address _creator,\\n    uint256 _mintEndsTimestamp,\\n    uint256 _visibleEndsTimestamp\\n  );\\n\\n  function createSnap(\\n    string memory _name,\\n    string memory _symbol,\\n    ISnapCore.ContractURI memory _contractURI,\\n    string memory _tokenImageURL,\\n    string memory _snapImageURL,\\n    uint256 _mintFee,\\n    address payable _mintFeeRecipient,\\n    address payable _creator,\\n    uint256 _salePrice\\n  ) external returns (address snapAddress);\\n\\n  function getActiveSnaps() external view returns (address[] memory snaps);\\n\\n  function getVisibleSnaps() external view returns (address[] memory snaps);\\n\\n  function getActiveByCreator(address _creator) external view returns (address[] memory snaps);\\n\\n  function getVisibleByCreator(address _creator) external view returns (address[] memory snaps);\\n\\n  function isActive(address _snap) external view returns (bool active);\\n\\n  function isVisible(address _snap) external view returns (bool visible);\\n}\\n\",\"keccak256\":\"0xe148334cf81b4ac28b5f9e47c9576911e7a6bfc2f0f261c44fc79b6e56a1f38a\",\"license\":\"MIT\"},\"contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode and decode strings in Base64.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\nlibrary Base64 {\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n  /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n  /// @param noPadding Whether to strip away the padding.\\n  function encode(\\n    bytes memory data,\\n    bool fileSafe,\\n    bool noPadding\\n  ) internal pure returns (string memory result) {\\n    assembly {\\n      let dataLength := mload(data)\\n\\n      if dataLength {\\n        // Multiply by 4/3 rounded up.\\n        // The `shl(2, ...)` is equivalent to multiplying by 4.\\n        let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n        // Set `result` to point to the start of the free memory.\\n        result := mload(0x40)\\n\\n        // Store the table into the scratch space.\\n        // Offsetted by -1 byte so that the `mload` will load the character.\\n        // We will rewrite the free memory pointer at `0x40` later with\\n        // the allocated size.\\n        // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n        mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n        mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n        // Skip the first slot, which stores the length.\\n        let ptr := add(result, 0x20)\\n        let end := add(ptr, encodedLength)\\n\\n        // Run over the input, 3 bytes at a time.\\n        // prettier-ignore\\n        for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(    ptr    , mload(and(shr(18, input), 0x3F)))\\n                    mstore8(add(ptr, 1), mload(and(shr(12, input), 0x3F)))\\n                    mstore8(add(ptr, 2), mload(and(shr( 6, input), 0x3F)))\\n                    mstore8(add(ptr, 3), mload(and(        input , 0x3F)))\\n                    \\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    // prettier-ignore\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n\\n        let r := mod(dataLength, 3)\\n\\n        switch noPadding\\n        case 0 {\\n          // Offset `ptr` and pad with '='. We can simply write over the end.\\n          mstore8(sub(ptr, iszero(iszero(r))), 0x3d) // Pad at `ptr - 1` if `r > 0`.\\n          mstore8(sub(ptr, shl(1, eq(r, 1))), 0x3d) // Pad at `ptr - 2` if `r == 1`.\\n          // Write the length of the string.\\n          mstore(result, encodedLength)\\n        }\\n        default {\\n          // Write the length of the string.\\n          mstore(result, sub(encodedLength, add(iszero(iszero(r)), eq(r, 1))))\\n        }\\n\\n        // Allocate the memory for the string.\\n        // Add 31 and mask with `not(31)` to round the\\n        // free memory pointer up the next multiple of 32.\\n        mstore(0x40, and(add(end, 31), not(31)))\\n      }\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// Equivalent to `encode(data, false, false)`.\\n  function encode(bytes memory data) internal pure returns (string memory result) {\\n    result = encode(data, false, false);\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// Equivalent to `encode(data, fileSafe, false)`.\\n  function encode(bytes memory data, bool fileSafe) internal pure returns (string memory result) {\\n    result = encode(data, fileSafe, false);\\n  }\\n\\n  /// @dev Decodes base64 encoded `data`.\\n  ///\\n  /// Supports:\\n  /// - RFC 4648 (both standard and file-safe mode).\\n  /// - RFC 3501 (63: ',').\\n  ///\\n  /// Does not support:\\n  /// - Line breaks.\\n  ///\\n  /// Note: For performance reasons,\\n  /// this function will NOT revert on invalid `data` inputs.\\n  /// Outputs for invalid inputs will simply be undefined behaviour.\\n  /// It is the user's responsibility to ensure that the `data`\\n  /// is a valid base64 encoded string.\\n  function decode(string memory data) internal pure returns (bytes memory result) {\\n    assembly {\\n      let dataLength := mload(data)\\n\\n      if dataLength {\\n        let end := add(data, dataLength)\\n        let decodedLength := mul(shr(2, dataLength), 3)\\n\\n        switch and(dataLength, 3)\\n        case 0 {\\n          // If padded.\\n          decodedLength := sub(\\n            decodedLength,\\n            add(eq(and(mload(end), 0xFF), 0x3d), eq(and(mload(end), 0xFFFF), 0x3d3d))\\n          )\\n        }\\n        default {\\n          // If non-padded.\\n          decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n        }\\n\\n        result := mload(0x40)\\n\\n        // Write the length of the string.\\n        mstore(result, decodedLength)\\n\\n        // Skip the first slot, which stores the length.\\n        let ptr := add(result, 0x20)\\n\\n        // Load the table into the scratch space.\\n        // Constants are optimized for smaller bytecode with zero gas overhead.\\n        // `m` also doubles as the mask of the upper 6 bits.\\n        let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n        mstore(0x5b, m)\\n        mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n        mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n        // prettier-ignore\\n        for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n\\n                    ptr := add(ptr, 3)\\n                    \\n                    // prettier-ignore\\n                    if iszero(lt(data, end)) { break }\\n                }\\n\\n        // Allocate the memory for the string.\\n        // Add 32 + 31 and mask with `not(31)` to round the\\n        // free memory pointer up the next multiple of 32.\\n        mstore(0x40, and(add(add(result, decodedLength), 63), not(31)))\\n\\n        // Restore the zero slot.\\n        mstore(0x60, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb5ef80b817a86dedb56a3e0f74e933d9a94e36a0fbe5aa6725940094a4d98be5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614702806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80637028d07911620000625780637028d07914620000cf57806394053ad914620000f75780639f8a13d71462000127578063b46af7c4146200013e57600080fd5b80632fd31929146200008c5780634080669214620000ae57806346fd785b14620000b8575b600080fd5b6200009662000155565b604051620000a5919062000eb4565b60405180910390f35b6200009662000390565b62000096620000c936600462000f1c565b620005c5565b620000e6620000e036600462000f1c565b620008a9565b6040519015158152602001620000a5565b6200010e6200010836600462001144565b62000938565b6040516001600160a01b039091168152602001620000a5565b620000e66200013836600462000f1c565b62000b67565b620000966200014f36600462000f1c565b62000bca565b60015460609060009067ffffffffffffffff81111562000179576200017962000f43565b604051908082528060200260200182016040528015620001a3578160200160208202803683370190505b5090506000805b600154811015620002c95760018181548110620001cb57620001cb6200125f565b6000918252602091829020015460408051635b92ac0d60e01b815290516001600160a01b0390921692635b92ac0d926004808401938290030181865afa1580156200021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000240919062001275565b15620002b457600181815481106200025c576200025c6200125f565b6000918252602090912001546001600160a01b031683836200027e81620012af565b9450815181106200029357620002936200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620002c081620012af565b915050620001aa565b508067ffffffffffffffff811115620002e657620002e662000f43565b60405190808252806020026020018201604052801562000310578160200160208202803683370190505b50925060005b818161ffff1610156200038a57828161ffff16815181106200033c576200033c6200125f565b6020026020010151848261ffff16815181106200035d576200035d6200125f565b6001600160a01b0390921660209283029190910190910152806200038181620012cb565b91505062000316565b50505090565b60015460609060009067ffffffffffffffff811115620003b457620003b462000f43565b604051908082528060200260200182016040528015620003de578160200160208202803683370190505b5090506000805b6001548110156200050457600181815481106200040657620004066200125f565b60009182526020918290200154604080516307da861360e11b815290516001600160a01b0390921692630fb50c26926004808401938290030181865afa15801562000455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047b919062001275565b15620004ef57600181815481106200049757620004976200125f565b6000918252602090912001546001600160a01b03168383620004b981620012af565b945081518110620004ce57620004ce6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620004fb81620012af565b915050620003e5565b508067ffffffffffffffff81111562000521576200052162000f43565b6040519080825280602002602001820160405280156200054b578160200160208202803683370190505b50925060005b818161ffff1610156200038a57828161ffff16815181106200057757620005776200125f565b6020026020010151848261ffff16815181106200059857620005986200125f565b6001600160a01b039092166020928302919091019091015280620005bc81620012cb565b91505062000551565b60015460609060009067ffffffffffffffff811115620005e957620005e962000f43565b60405190808252806020026020018201604052801562000613578160200160208202803683370190505b5090506000805b600154811015620007e057846001600160a01b0316600182815481106200064557620006456200125f565b6000918252602091829020015460408051638da5cb5b60e01b815290516001600160a01b0390921692638da5cb5b926004808401938290030181865afa15801562000694573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ba9190620012ef565b6001600160a01b031614801562000757575060018181548110620006e257620006e26200125f565b6000918252602091829020015460408051635b92ac0d60e01b815290516001600160a01b0390921692635b92ac0d926004808401938290030181865afa15801562000731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000757919062001275565b15620007cb57600181815481106200077357620007736200125f565b6000918252602090912001546001600160a01b031683836200079581620012af565b945081518110620007aa57620007aa6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620007d781620012af565b9150506200061a565b508067ffffffffffffffff811115620007fd57620007fd62000f43565b60405190808252806020026020018201604052801562000827578160200160208202803683370190505b50925060005b818161ffff161015620008a157828161ffff16815181106200085357620008536200125f565b6020026020010151848261ffff16815181106200087457620008746200125f565b6001600160a01b0390921660209283029190910190910152806200089881620012cb565b9150506200082d565b505050919050565b6001600160a01b03811660009081526020819052604081205460ff168015620009325750816001600160a01b0316630fb50c266040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200090c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000932919062001275565b92915050565b600065085e0abb6000851015620009955760405162461bcd60e51b815260206004820152601c60248201527f536e6170466163746f72793a4d696e742d6665652d746f6f2d6c6f7700000000604482015260640160405180910390fd5b60008a8a8a8a8a8a8a8a8a604051620009ae9062000ea6565b620009c2999897969594939291906200135f565b604051809103906000f080158015620009df573d6000803e3d6000fd5b506001600160a01b038116600081815260208181526040808320805460ff191660019081179091558054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180546001600160a01b031916841790558151633f82e3bd60e11b8152915193945091927f4e8d3c620091d71faf6d62bffc754913e219a910010621e9c0a8bf7bd09cc8499288928592637f05c77a926004808401939192918290030181865afa15801562000aa6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000acc9190620014a3565b846001600160a01b03166375abedcf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b319190620014a3565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a29a9950505050505050505050565b6001600160a01b03811660009081526020819052604081205460ff168015620009325750816001600160a01b0316635b92ac0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200090c573d6000803e3d6000fd5b60015460609060009067ffffffffffffffff81111562000bee5762000bee62000f43565b60405190808252806020026020018201604052801562000c18578160200160208202803683370190505b5090506000805b60015481101562000de557846001600160a01b03166001828154811062000c4a5762000c4a6200125f565b6000918252602091829020015460408051638da5cb5b60e01b815290516001600160a01b0390921692638da5cb5b926004808401938290030181865afa15801562000c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cbf9190620012ef565b6001600160a01b031614801562000d5c57506001818154811062000ce75762000ce76200125f565b60009182526020918290200154604080516307da861360e11b815290516001600160a01b0390921692630fb50c26926004808401938290030181865afa15801562000d36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5c919062001275565b1562000dd0576001818154811062000d785762000d786200125f565b6000918252602090912001546001600160a01b0316838362000d9a81620012af565b94508151811062000daf5762000daf6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8062000ddc81620012af565b91505062000c1f565b508067ffffffffffffffff81111562000e025762000e0262000f43565b60405190808252806020026020018201604052801562000e2c578160200160208202803683370190505b50925060005b818161ffff161015620008a157828161ffff168151811062000e585762000e586200125f565b6020026020010151848261ffff168151811062000e795762000e796200125f565b6001600160a01b03909216602092830291909101909101528062000e9d81620012cb565b91505062000e32565b61320f80620014be83390190565b6020808252825182820181905260009190848201906040850190845b8181101562000ef75783516001600160a01b03168352928401929184019160010162000ed0565b50909695505050505050565b6001600160a01b038116811462000f1957600080fd5b50565b60006020828403121562000f2f57600080fd5b813562000f3c8162000f03565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171562000f7f5762000f7f62000f43565b60405290565b600082601f83011262000f9757600080fd5b813567ffffffffffffffff8082111562000fb55762000fb562000f43565b604051601f8301601f19908116603f0116810190828211818310171562000fe05762000fe062000f43565b8160405283815286602085880101111562000ffa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060c082840312156200102d57600080fd5b6200103762000f59565b9050813567ffffffffffffffff808211156200105257600080fd5b620010608583860162000f85565b835260208401359150808211156200107757600080fd5b620010858583860162000f85565b602084015260408401359150808211156200109f57600080fd5b620010ad8583860162000f85565b60408401526060840135915080821115620010c757600080fd5b620010d58583860162000f85565b60608401526080840135915080821115620010ef57600080fd5b620010fd8583860162000f85565b608084015260a08401359150808211156200111757600080fd5b50620011268482850162000f85565b60a08301525092915050565b80356200113f8162000f03565b919050565b60008060008060008060008060006101208a8c0312156200116457600080fd5b893567ffffffffffffffff808211156200117d57600080fd5b6200118b8d838e0162000f85565b9a5060208c0135915080821115620011a257600080fd5b620011b08d838e0162000f85565b995060408c0135915080821115620011c757600080fd5b620011d58d838e016200101a565b985060608c0135915080821115620011ec57600080fd5b620011fa8d838e0162000f85565b975060808c01359150808211156200121157600080fd5b50620012208c828d0162000f85565b95505060a08a013593506200123860c08b0162001132565b92506200124860e08b0162001132565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200128857600080fd5b8151801515811462000f3c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620012c457620012c462001299565b5060010190565b600061ffff808316818103620012e557620012e562001299565b6001019392505050565b6000602082840312156200130257600080fd5b815162000f3c8162000f03565b6000815180845260005b81811015620013375760208185018101518683018201520162001319565b818111156200134a576000602083870101525b50601f01601f19169290920160200192915050565b6000610120808352620013758184018d6200130f565b905082810360208401526200138b818c6200130f565b90508281036040840152895160c08252620013aa60c08301826200130f565b905060208b01518282036020840152620013c582826200130f565b91505060408b01518282036040840152620013e182826200130f565b91505060608b01518282036060840152620013fd82826200130f565b91505060808b015182820360808401526200141982826200130f565b91505060a08b015182820360a08401526200143582826200130f565b9250505082810360608401526200144d818a6200130f565b905082810360808401526200146381896200130f565b9150508560a08301526200148260c08301866001600160a01b03169052565b6001600160a01b039390931660e08201526101000152979650505050505050565b600060208284031215620014b657600080fd5b505191905056fe6101206040523480156200001257600080fd5b506040516200320f3803806200320f83398101604081905262000035916200050e565b88886000620000458382620006b7565b506001620000548282620006b7565b505050620000716200006b6200019960201b60201c565b6200019d565b6001600755600a620000848a82620006b7565b50600b620000938982620006b7565b5086518790600d908190620000a99082620006b7565b5060208201516001820190620000c09082620006b7565b5060408201516002820190620000d79082620006b7565b5060608201516003820190620000ee9082620006b7565b5060808201516004820190620001059082620006b7565b5060a082015160058201906200011c9082620006b7565b50600891506200012f90508782620006b7565b5060096200013e8682620006b7565b506200014e620151804262000783565b608052620001606202a3004262000783565b60a05260c08490526001600160a01b0380841660e0528216610100526200018782620001ef565b600c5550620007aa9650505050505050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001f962000272565b6001600160a01b038116620002645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200026f816200019d565b50565b6006546001600160a01b03163314620002ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025b565b565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156200030b576200030b620002d0565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200033c576200033c620002d0565b604052919050565b600082601f8301126200035657600080fd5b81516001600160401b03811115620003725762000372620002d0565b602062000388601f8301601f1916820162000311565b82815285828487010111156200039d57600080fd5b60005b83811015620003bd578581018301518282018401528201620003a0565b83811115620003cf5760008385840101525b5095945050505050565b600060c08284031215620003ec57600080fd5b620003f6620002e6565b82519091506001600160401b03808211156200041157600080fd5b6200041f8583860162000344565b835260208401519150808211156200043657600080fd5b620004448583860162000344565b602084015260408401519150808211156200045e57600080fd5b6200046c8583860162000344565b604084015260608401519150808211156200048657600080fd5b620004948583860162000344565b60608401526080840151915080821115620004ae57600080fd5b620004bc8583860162000344565b608084015260a0840151915080821115620004d657600080fd5b50620004e58482850162000344565b60a08301525092915050565b80516001600160a01b03811681146200050957600080fd5b919050565b60008060008060008060008060006101208a8c0312156200052e57600080fd5b89516001600160401b03808211156200054657600080fd5b620005548d838e0162000344565b9a5060208c01519150808211156200056b57600080fd5b620005798d838e0162000344565b995060408c01519150808211156200059057600080fd5b6200059e8d838e01620003d9565b985060608c0151915080821115620005b557600080fd5b620005c38d838e0162000344565b975060808c0151915080821115620005da57600080fd5b50620005e98c828d0162000344565b95505060a08a015193506200060160c08b01620004f1565b92506200061160e08b01620004f1565b91506101008a015190509295985092959850929598565b600181811c908216806200063d57607f821691505b6020821081036200065e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006b257600081815260208120601f850160051c810160208610156200068d5750805b601f850160051c820191505b81811015620006ae5782815560010162000699565b5050505b505050565b81516001600160401b03811115620006d357620006d3620002d0565b620006eb81620006e4845462000628565b8462000664565b602080601f8311600181146200072357600084156200070a5750858301515b600019600386901b1c1916600185901b178555620006ae565b600085815260208120601f198616915b82811015620007545788860151825594840194600190910190840162000733565b5085821015620007735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008219821115620007a557634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e051610100516129be62000851600039600081816108bc0152610ff40152600061181501526000818161048e01528181610b3d015261183f01526000818161029d0152818161045d0152818161063a0152818161098e01528181610c4e0152818161105101528181611116015281816111b201526111f301526000818161039b015281816104c401528181610ad6015261102b01526129be6000f3fe6080604052600436106101d85760003560e01c80636d4ce63c1161010257806395d89b4111610095578063d45bec7c11610064578063d45bec7c14610590578063e8a3d485146105a7578063e985e9c5146105bc578063f2fde38b1461060557600080fd5b806395d89b411461051b578063a22cb46514610530578063b88d4fde14610550578063c87b56dd1461057057600080fd5b80637a5caab3116100d15780637a5caab31461047f5780637f05c77a146104b25780638c4963ac146104e65780638da5cb5b146104fd57600080fd5b80636d4ce63c146103f457806370a0823114610416578063715018a61461043657806375abedcf1461044b57600080fd5b806323b872dd1161017a57806342966c681161014957806342966c681461036c5780635b92ac0d1461038c5780636352211e146103c15780636a627842146103e157600080fd5b806323b872dd146103025780632fbc0bf1146103225780633ccfd60b1461033757806342842e0e1461034c57600080fd5b8063095ea7b3116101b6578063095ea7b31461026c5780630fb50c261461028e57806318160ddd146102c35780631919fed7146102e257600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611e71565b610625565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610636565b6040516102099190611eed565b34801561024057600080fd5b5061025461024f366004611f00565b61071e565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c610287366004611f30565b610745565b005b34801561029a57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000042106101fd565b3480156102cf57600080fd5b506013545b604051908152602001610209565b3480156102ee57600080fd5b5061028c6102fd366004611f00565b610864565b34801561030e57600080fd5b5061028c61031d366004611f5a565b610871565b34801561032e57600080fd5b50600c546102d4565b34801561034357600080fd5b5061028c6108a2565b34801561035857600080fd5b5061028c610367366004611f5a565b610971565b34801561037857600080fd5b5061028c610387366004611f00565b61098c565b34801561039857600080fd5b507f000000000000000000000000000000000000000000000000000000000000000042106101fd565b3480156103cd57600080fd5b506102546103dc366004611f00565b610a1b565b6102d46103ef366004611f96565b610a7b565b34801561040057600080fd5b50610409610bed565b6040516102099190611fb1565b34801561042257600080fd5b506102d4610431366004611f96565b611078565b34801561044257600080fd5b5061028c6110fe565b34801561045757600080fd5b506102d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102d4565b3480156104be57600080fd5b506102d47f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f257600080fd5b506102d46201518081565b34801561050957600080fd5b506006546001600160a01b0316610254565b34801561052757600080fd5b50610227611112565b34801561053c57600080fd5b5061028c61054b3660046120ae565b61116b565b34801561055c57600080fd5b5061028c61056b366004612100565b611176565b34801561057c57600080fd5b5061022761058b366004611f00565b6111ae565b34801561059c57600080fd5b506102d46202a30081565b3480156105b357600080fd5b506102276111ef565b3480156105c857600080fd5b506101fd6105d73660046121dc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561061157600080fd5b5061028c610620366004611f96565b611229565b6000610630826112a2565b92915050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156106f057600a805461066d9061220f565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061220f565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b5050505050905090565b5060408051808201909152601081526f045787069726564204e465420536e61760841b602082015290565b90565b6000610729826112f2565b506000908152600460205260409020546001600160a01b031690565b600061075082610a1b565b9050806001600160a01b0316836001600160a01b0316036107c25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806107de57506107de81336105d7565b6108505760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107b9565b61085a8383611351565b505050565b905090565b61086c6113bf565b600c55565b61087b3382611419565b6108975760405162461bcd60e51b81526004016107b990612249565b61085a838383611498565b6108aa6113bf565b60405147906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083908381818185875af1925050503d8060008114610917576040519150601f19603f3d011682016040523d82523d6000602084013e61091c565b606091505b505090508061096d5760405162461bcd60e51b815260206004820152601c60248201527f4e4654536e61703a66756e64732d72656c656173652d6661696c65640000000060448201526064016107b9565b5050565b61085a83838360405180602001604052806000815250611176565b7f00000000000000000000000000000000000000000000000000000000000000004210156109fc5760405162461bcd60e51b815260206004820152601960248201527f4e4654536e61703a756e617574686f72697a65642d6275726e0000000000000060448201526064016107b9565b610a0581611634565b601360008154610a14906122ad565b9091555050565b6000818152600260205260408120546001600160a01b0316806106305760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107b9565b6000600260075403610acf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107b9565b60026007557f00000000000000000000000000000000000000000000000000000000000000004210610b3b5760405162461bcd60e51b815260206004820152601560248201527413919514db985c0e9b5a5b9d1a5b99cb595b991959605a1b60448201526064016107b9565b7f0000000000000000000000000000000000000000000000000000000000000000600c54610b6991906122c4565b341015610bb85760405162461bcd60e51b815260206004820152601b60248201527f4e4654536e61703a696e73756666696369656e742d616d6f756e74000000000060448201526064016107b9565b6000601360008154610bc9906122dc565b91829055509050610bda83826116cf565b610be2611811565b600160075592915050565b610c4c60405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b7f000000000000000000000000000000000000000000000000000000000000000042101561071b57604051806101400160405280600d6000018054610c909061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbc9061220f565b8015610d095780601f10610cde57610100808354040283529160200191610d09565b820191906000526020600020905b815481529060010190602001808311610cec57829003601f168201915b50505050508152602001600d6001018054610d239061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4f9061220f565b8015610d9c5780601f10610d7157610100808354040283529160200191610d9c565b820191906000526020600020905b815481529060010190602001808311610d7f57829003601f168201915b50505050508152602001600d6002018054610db69061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610de29061220f565b8015610e2f5780601f10610e0457610100808354040283529160200191610e2f565b820191906000526020600020905b815481529060010190602001808311610e1257829003601f168201915b50505050508152602001600d6003018054610e499061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e759061220f565b8015610ec25780601f10610e9757610100808354040283529160200191610ec2565b820191906000526020600020905b815481529060010190602001808311610ea557829003601f168201915b50505050508152602001600d6004018054610edc9061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f089061220f565b8015610f555780601f10610f2a57610100808354040283529160200191610f55565b820191906000526020600020905b815481529060010190602001808311610f3857829003601f168201915b50505050508152602001600d6005018054610f6f9061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9b9061220f565b8015610fe85780601f10610fbd57610100808354040283529160200191610fe8565b820191906000526020600020905b815481529060010190602001808311610fcb57829003601f168201915b505050505081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600c5481526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250905090565b60006001600160a01b0382166110e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107b9565b506001600160a01b031660009081526003602052604090205490565b6111066113bf565b61111060006118f4565b565b60607f000000000000000000000000000000000000000000000000000000000000000042101561114957600b805461066d9061220f565b5060408051808201909152600781526604e4654534e41560cc1b602082015290565b61096d338383611946565b6111803383611419565b61119c5760405162461bcd60e51b81526004016107b990612249565b6111a884848484611a14565b50505050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156111e15761063082611a47565b61063082611ac5565b919050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156112215761085f611ae6565b61085f611b32565b6112316113bf565b6001600160a01b0381166112965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107b9565b61129f816118f4565b50565b60006001600160e01b031982166380ac58cd60e01b14806112d357506001600160e01b03198216635b5e139f60e01b145b8061063057506301ffc9a760e01b6001600160e01b0319831614610630565b6000818152600260205260409020546001600160a01b031661129f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107b9565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061138682610a1b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b031633146111105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107b9565b60008061142583610a1b565b9050806001600160a01b0316846001600160a01b0316148061146c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806114905750836001600160a01b03166114858461071e565b6001600160a01b0316145b949350505050565b826001600160a01b03166114ab82610a1b565b6001600160a01b03161461150f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107b9565b6001600160a01b0382166115715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107b9565b61157c600082611351565b6001600160a01b03831660009081526003602052604081208054600192906115a59084906122f5565b90915550506001600160a01b03821660009081526003602052604081208054600192906115d39084906122c4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061163f82610a1b565b905061164c600083611351565b6001600160a01b03811660009081526003602052604081208054600192906116759084906122f5565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166117255760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107b9565b6000818152600260205260409020546001600160a01b03161561178a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107b9565b6001600160a01b03821660009081526003602052604081208054600192906117b39084906122c4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000060405160006040518083038185875af1925050503d806000811461189e576040519150601f19603f3d011682016040523d82523d6000602084013e6118a3565b606091505b505090508061129f5760405162461bcd60e51b815260206004820152601f60248201527f4e4654536e61703a6d696e742d6665652d72656c656173652d6661696c65640060448201526064016107b9565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036119a75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107b9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a1f848484611498565b611a2b84848484611b51565b6111a85760405162461bcd60e51b81526004016107b99061230c565b6060611a9f600d611a5784611c52565b604051602001611a689291906123fb565b60408051601f1981840301815290829052611a8b91600e90600890602001612436565b604051602081830303815290604052611d53565b604051602001611aaf91906124e7565b6040516020818303038152906040529050919050565b6060611a9f611ad383611c52565b6009604051602001611a8b92919061252c565b604051606090611b0e90611a8b90600d90600e90600f906010906011906012906020016125ee565b604051602001611b1e91906124e7565b604051602081830303815290604052905090565b604051606090611b0e90611a8b90600990601190601290602001612761565b60006001600160a01b0384163b15611c4757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b959033908990889088906004016128da565b6020604051808303816000875af1925050508015611bd0575060408051601f3d908101601f19168201909252611bcd91810190612917565b60015b611c2d573d808015611bfe576040519150601f19603f3d011682016040523d82523d6000602084013e611c03565b606091505b508051600003611c255760405162461bcd60e51b81526004016107b99061230c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611490565b506001949350505050565b606081600003611c795750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ca35780611c8d816122dc565b9150611c9c9050600a8361294a565b9150611c7d565b60008167ffffffffffffffff811115611cbe57611cbe6120ea565b6040519080825280601f01601f191660200182016040528015611ce8576020820181803683370190505b5090505b841561149057611cfd6001836122f5565b9150611d0a600a8661295e565b611d159060306122c4565b60f81b818381518110611d2a57611d2a612972565b60200101906001600160f81b031916908160001a905350611d4c600a8661294a565b9450611cec565b606061063082600080606083518015611e53576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b6003880197508751603f8160121c16518353603f81600c1c16516001840153603f8160061c16516002840153603f811651600384015350600482019150808210611dcc5760038406868015611e2c57600182148215150185038752611e44565b603d821515850353603d6001831460011b8503538487525b5050601f01601f191660405250505b509392505050565b6001600160e01b03198116811461129f57600080fd5b600060208284031215611e8357600080fd5b8135611e8e81611e5b565b9392505050565b60005b83811015611eb0578181015183820152602001611e98565b838111156111a85750506000910152565b60008151808452611ed9816020860160208601611e95565b601f01601f19169290920160200192915050565b602081526000611e8e6020830184611ec1565b600060208284031215611f1257600080fd5b5035919050565b80356001600160a01b03811681146111ea57600080fd5b60008060408385031215611f4357600080fd5b611f4c83611f19565b946020939093013593505050565b600080600060608486031215611f6f57600080fd5b611f7884611f19565b9250611f8660208501611f19565b9150604084013590509250925092565b600060208284031215611fa857600080fd5b611e8e82611f19565b6020815260008251610140806020850152611fd0610160850183611ec1565b91506020850151601f1980868503016040870152611fee8483611ec1565b9350604087015191508086850301606087015261200b8483611ec1565b935060608701519150808685030160808701526120288483611ec1565b935060808701519150808685030160a08701526120458483611ec1565b935060a08701519150808685030160c0870152506120638382611ec1565b92505060c085015161208060e08601826001600160a01b03169052565b5060e08501516101008581019190915285015161012080860191909152909401519390920192909252919050565b600080604083850312156120c157600080fd5b6120ca83611f19565b9150602083013580151581146120df57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561211657600080fd5b61211f85611f19565b935061212d60208601611f19565b925060408501359150606085013567ffffffffffffffff8082111561215157600080fd5b818701915087601f83011261216557600080fd5b813581811115612177576121776120ea565b604051601f8201601f19908116603f0116810190838211818310171561219f5761219f6120ea565b816040528281528a60208487010111156121b857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156121ef57600080fd5b6121f883611f19565b915061220660208401611f19565b90509250929050565b600181811c9082168061222357607f821691505b60208210810361224357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816122bc576122bc612297565b506000190190565b600082198211156122d7576122d7612297565b500190565b6000600182016122ee576122ee612297565b5060010190565b60008282101561230757612307612297565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061237857607f831692505b6020808410820361239957634e487b7160e01b600052602260045260246000fd5b8180156123ad57600181146123c2576123ef565b60ff19861689528415158502890196506123ef565b60008881526020902060005b868110156123e75781548b8201529085019083016123ce565b505084890196505b50505050505092915050565b6000612407828561235e565b600160fd1b81528351612421816001840160208801611e95565b01600101949350505050565b601160f91b9052565b673d913730b6b2911d60c11b8152601160f91b60088201819052845160009190612467816009860160208a01611e95565b61088b60f21b60099185019182018190526d113232b9b1b934b83a34b7b7111d60911b600b830152601982018390526124a3601a83018861235e565b908152671134b6b0b3b2911d60c11b6002820152600a810183905290506124cd600b82018661235e565b91825250607d60f81b600182015260020195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161251f81601d850160208701611e95565b91909101601d0192915050565b673d913730b6b2911d60c11b8152601160f91b6008820181905283516000919061255d816009860160208901611e95565b61088b60f21b60099185019182018190526d113232b9b1b934b83a34b7b7111d60911b600b83015260198201839052623f3f3f60e81b601a830152601d8201526125b4601f8201671134b6b0b3b2911d60c11b9052565b6125c06027820161242d565b6125cd602882018661235e565b9150506125d98161242d565b607d60f81b6001820152600201949350505050565b673d913730b6b2911d60c11b81526126086008820161242d565b6000612617600983018961235e565b61088b60f21b8152600261263d8183016d113232b9b1b934b83a34b7b7111d60911b9052565b6126496010830161242d565b612656601183018a61235e565b61088b60f21b81529150671134b6b0b3b2911d60c11b8282015261267c600a830161242d565b612689600b83018961235e565b61088b60f21b815291506e1132bc3a32b93730b62634b735911d60891b828201526126b66011830161242d565b6126c3601283018861235e565b61088b60f21b81529150761139b2b63632b92332b2a130b9b4b9a837b4b73a39911d60491b828201526126f86019830161242d565b612705601a83018761235e565b61088b60f21b815291506e113332b2a932b1b4b834b2b73a111d60891b828201526127326011830161242d565b61273f601283018661235e565b915061274a8261242d565b607d60f81b60018301520198975050505050505050565b673d913730b6b2911d60c11b815261277b6008820161242d565b71115e1c1a5c9959081391950814db985c088b60721b60098201526d113232b9b1b934b83a34b7b7111d60911b601b8201526127b96029820161242d565b640fcfcfc88b60da1b602a820152671134b6b0b3b2911d60c11b602f8201526127e46037820161242d565b60006127f3603883018661235e565b61088b60f21b81526e1132bc3a32b93730b62634b735911d60891b600282015261281f6011820161242d565b7f68747470733a2f2f6e6674736e6170732e78797a2f222c0000000000000000006012820152761139b2b63632b92332b2a130b9b4b9a837b4b73a39911d60491b60298201526128716040820161242d565b61287e604182018661235e565b61088b60f21b815290506e113332b2a932b1b4b834b2b73a111d60891b60028201526128ac6011820161242d565b6128b9601282018561235e565b90506128c48161242d565b607d60f81b600182015260020195945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061290d90830184611ec1565b9695505050505050565b60006020828403121561292957600080fd5b8151611e8e81611e5b565b634e487b7160e01b600052601260045260246000fd5b60008261295957612959612934565b500490565b60008261296d5761296d612934565b500690565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220139f969faf75eb9551d0b9d9769e19d2d4865f91f58f7042647e730d841e0cfa64736f6c634300080f0033a2646970667358221220bffbd12b086d4f88c979175eeb54b78c1dbef7795338ebb2be6a378fe262a7cc64736f6c634300080f0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c80637028d07911620000625780637028d07914620000cf57806394053ad914620000f75780639f8a13d71462000127578063b46af7c4146200013e57600080fd5b80632fd31929146200008c5780634080669214620000ae57806346fd785b14620000b8575b600080fd5b6200009662000155565b604051620000a5919062000eb4565b60405180910390f35b6200009662000390565b62000096620000c936600462000f1c565b620005c5565b620000e6620000e036600462000f1c565b620008a9565b6040519015158152602001620000a5565b6200010e6200010836600462001144565b62000938565b6040516001600160a01b039091168152602001620000a5565b620000e66200013836600462000f1c565b62000b67565b620000966200014f36600462000f1c565b62000bca565b60015460609060009067ffffffffffffffff81111562000179576200017962000f43565b604051908082528060200260200182016040528015620001a3578160200160208202803683370190505b5090506000805b600154811015620002c95760018181548110620001cb57620001cb6200125f565b6000918252602091829020015460408051635b92ac0d60e01b815290516001600160a01b0390921692635b92ac0d926004808401938290030181865afa1580156200021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000240919062001275565b15620002b457600181815481106200025c576200025c6200125f565b6000918252602090912001546001600160a01b031683836200027e81620012af565b9450815181106200029357620002936200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620002c081620012af565b915050620001aa565b508067ffffffffffffffff811115620002e657620002e662000f43565b60405190808252806020026020018201604052801562000310578160200160208202803683370190505b50925060005b818161ffff1610156200038a57828161ffff16815181106200033c576200033c6200125f565b6020026020010151848261ffff16815181106200035d576200035d6200125f565b6001600160a01b0390921660209283029190910190910152806200038181620012cb565b91505062000316565b50505090565b60015460609060009067ffffffffffffffff811115620003b457620003b462000f43565b604051908082528060200260200182016040528015620003de578160200160208202803683370190505b5090506000805b6001548110156200050457600181815481106200040657620004066200125f565b60009182526020918290200154604080516307da861360e11b815290516001600160a01b0390921692630fb50c26926004808401938290030181865afa15801562000455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047b919062001275565b15620004ef57600181815481106200049757620004976200125f565b6000918252602090912001546001600160a01b03168383620004b981620012af565b945081518110620004ce57620004ce6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620004fb81620012af565b915050620003e5565b508067ffffffffffffffff81111562000521576200052162000f43565b6040519080825280602002602001820160405280156200054b578160200160208202803683370190505b50925060005b818161ffff1610156200038a57828161ffff16815181106200057757620005776200125f565b6020026020010151848261ffff16815181106200059857620005986200125f565b6001600160a01b039092166020928302919091019091015280620005bc81620012cb565b91505062000551565b60015460609060009067ffffffffffffffff811115620005e957620005e962000f43565b60405190808252806020026020018201604052801562000613578160200160208202803683370190505b5090506000805b600154811015620007e057846001600160a01b0316600182815481106200064557620006456200125f565b6000918252602091829020015460408051638da5cb5b60e01b815290516001600160a01b0390921692638da5cb5b926004808401938290030181865afa15801562000694573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ba9190620012ef565b6001600160a01b031614801562000757575060018181548110620006e257620006e26200125f565b6000918252602091829020015460408051635b92ac0d60e01b815290516001600160a01b0390921692635b92ac0d926004808401938290030181865afa15801562000731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000757919062001275565b15620007cb57600181815481106200077357620007736200125f565b6000918252602090912001546001600160a01b031683836200079581620012af565b945081518110620007aa57620007aa6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620007d781620012af565b9150506200061a565b508067ffffffffffffffff811115620007fd57620007fd62000f43565b60405190808252806020026020018201604052801562000827578160200160208202803683370190505b50925060005b818161ffff161015620008a157828161ffff16815181106200085357620008536200125f565b6020026020010151848261ffff16815181106200087457620008746200125f565b6001600160a01b0390921660209283029190910190910152806200089881620012cb565b9150506200082d565b505050919050565b6001600160a01b03811660009081526020819052604081205460ff168015620009325750816001600160a01b0316630fb50c266040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200090c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000932919062001275565b92915050565b600065085e0abb6000851015620009955760405162461bcd60e51b815260206004820152601c60248201527f536e6170466163746f72793a4d696e742d6665652d746f6f2d6c6f7700000000604482015260640160405180910390fd5b60008a8a8a8a8a8a8a8a8a604051620009ae9062000ea6565b620009c2999897969594939291906200135f565b604051809103906000f080158015620009df573d6000803e3d6000fd5b506001600160a01b038116600081815260208181526040808320805460ff191660019081179091558054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180546001600160a01b031916841790558151633f82e3bd60e11b8152915193945091927f4e8d3c620091d71faf6d62bffc754913e219a910010621e9c0a8bf7bd09cc8499288928592637f05c77a926004808401939192918290030181865afa15801562000aa6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000acc9190620014a3565b846001600160a01b03166375abedcf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b319190620014a3565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a29a9950505050505050505050565b6001600160a01b03811660009081526020819052604081205460ff168015620009325750816001600160a01b0316635b92ac0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200090c573d6000803e3d6000fd5b60015460609060009067ffffffffffffffff81111562000bee5762000bee62000f43565b60405190808252806020026020018201604052801562000c18578160200160208202803683370190505b5090506000805b60015481101562000de557846001600160a01b03166001828154811062000c4a5762000c4a6200125f565b6000918252602091829020015460408051638da5cb5b60e01b815290516001600160a01b0390921692638da5cb5b926004808401938290030181865afa15801562000c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cbf9190620012ef565b6001600160a01b031614801562000d5c57506001818154811062000ce75762000ce76200125f565b60009182526020918290200154604080516307da861360e11b815290516001600160a01b0390921692630fb50c26926004808401938290030181865afa15801562000d36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5c919062001275565b1562000dd0576001818154811062000d785762000d786200125f565b6000918252602090912001546001600160a01b0316838362000d9a81620012af565b94508151811062000daf5762000daf6200125f565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8062000ddc81620012af565b91505062000c1f565b508067ffffffffffffffff81111562000e025762000e0262000f43565b60405190808252806020026020018201604052801562000e2c578160200160208202803683370190505b50925060005b818161ffff161015620008a157828161ffff168151811062000e585762000e586200125f565b6020026020010151848261ffff168151811062000e795762000e796200125f565b6001600160a01b03909216602092830291909101909101528062000e9d81620012cb565b91505062000e32565b61320f80620014be83390190565b6020808252825182820181905260009190848201906040850190845b8181101562000ef75783516001600160a01b03168352928401929184019160010162000ed0565b50909695505050505050565b6001600160a01b038116811462000f1957600080fd5b50565b60006020828403121562000f2f57600080fd5b813562000f3c8162000f03565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171562000f7f5762000f7f62000f43565b60405290565b600082601f83011262000f9757600080fd5b813567ffffffffffffffff8082111562000fb55762000fb562000f43565b604051601f8301601f19908116603f0116810190828211818310171562000fe05762000fe062000f43565b8160405283815286602085880101111562000ffa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060c082840312156200102d57600080fd5b6200103762000f59565b9050813567ffffffffffffffff808211156200105257600080fd5b620010608583860162000f85565b835260208401359150808211156200107757600080fd5b620010858583860162000f85565b602084015260408401359150808211156200109f57600080fd5b620010ad8583860162000f85565b60408401526060840135915080821115620010c757600080fd5b620010d58583860162000f85565b60608401526080840135915080821115620010ef57600080fd5b620010fd8583860162000f85565b608084015260a08401359150808211156200111757600080fd5b50620011268482850162000f85565b60a08301525092915050565b80356200113f8162000f03565b919050565b60008060008060008060008060006101208a8c0312156200116457600080fd5b893567ffffffffffffffff808211156200117d57600080fd5b6200118b8d838e0162000f85565b9a5060208c0135915080821115620011a257600080fd5b620011b08d838e0162000f85565b995060408c0135915080821115620011c757600080fd5b620011d58d838e016200101a565b985060608c0135915080821115620011ec57600080fd5b620011fa8d838e0162000f85565b975060808c01359150808211156200121157600080fd5b50620012208c828d0162000f85565b95505060a08a013593506200123860c08b0162001132565b92506200124860e08b0162001132565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200128857600080fd5b8151801515811462000f3c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620012c457620012c462001299565b5060010190565b600061ffff808316818103620012e557620012e562001299565b6001019392505050565b6000602082840312156200130257600080fd5b815162000f3c8162000f03565b6000815180845260005b81811015620013375760208185018101518683018201520162001319565b818111156200134a576000602083870101525b50601f01601f19169290920160200192915050565b6000610120808352620013758184018d6200130f565b905082810360208401526200138b818c6200130f565b90508281036040840152895160c08252620013aa60c08301826200130f565b905060208b01518282036020840152620013c582826200130f565b91505060408b01518282036040840152620013e182826200130f565b91505060608b01518282036060840152620013fd82826200130f565b91505060808b015182820360808401526200141982826200130f565b91505060a08b015182820360a08401526200143582826200130f565b9250505082810360608401526200144d818a6200130f565b905082810360808401526200146381896200130f565b9150508560a08301526200148260c08301866001600160a01b03169052565b6001600160a01b039390931660e08201526101000152979650505050505050565b600060208284031215620014b657600080fd5b505191905056fe6101206040523480156200001257600080fd5b506040516200320f3803806200320f83398101604081905262000035916200050e565b88886000620000458382620006b7565b506001620000548282620006b7565b505050620000716200006b6200019960201b60201c565b6200019d565b6001600755600a620000848a82620006b7565b50600b620000938982620006b7565b5086518790600d908190620000a99082620006b7565b5060208201516001820190620000c09082620006b7565b5060408201516002820190620000d79082620006b7565b5060608201516003820190620000ee9082620006b7565b5060808201516004820190620001059082620006b7565b5060a082015160058201906200011c9082620006b7565b50600891506200012f90508782620006b7565b5060096200013e8682620006b7565b506200014e620151804262000783565b608052620001606202a3004262000783565b60a05260c08490526001600160a01b0380841660e0528216610100526200018782620001ef565b600c5550620007aa9650505050505050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001f962000272565b6001600160a01b038116620002645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200026f816200019d565b50565b6006546001600160a01b03163314620002ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025b565b565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156200030b576200030b620002d0565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200033c576200033c620002d0565b604052919050565b600082601f8301126200035657600080fd5b81516001600160401b03811115620003725762000372620002d0565b602062000388601f8301601f1916820162000311565b82815285828487010111156200039d57600080fd5b60005b83811015620003bd578581018301518282018401528201620003a0565b83811115620003cf5760008385840101525b5095945050505050565b600060c08284031215620003ec57600080fd5b620003f6620002e6565b82519091506001600160401b03808211156200041157600080fd5b6200041f8583860162000344565b835260208401519150808211156200043657600080fd5b620004448583860162000344565b602084015260408401519150808211156200045e57600080fd5b6200046c8583860162000344565b604084015260608401519150808211156200048657600080fd5b620004948583860162000344565b60608401526080840151915080821115620004ae57600080fd5b620004bc8583860162000344565b608084015260a0840151915080821115620004d657600080fd5b50620004e58482850162000344565b60a08301525092915050565b80516001600160a01b03811681146200050957600080fd5b919050565b60008060008060008060008060006101208a8c0312156200052e57600080fd5b89516001600160401b03808211156200054657600080fd5b620005548d838e0162000344565b9a5060208c01519150808211156200056b57600080fd5b620005798d838e0162000344565b995060408c01519150808211156200059057600080fd5b6200059e8d838e01620003d9565b985060608c0151915080821115620005b557600080fd5b620005c38d838e0162000344565b975060808c0151915080821115620005da57600080fd5b50620005e98c828d0162000344565b95505060a08a015193506200060160c08b01620004f1565b92506200061160e08b01620004f1565b91506101008a015190509295985092959850929598565b600181811c908216806200063d57607f821691505b6020821081036200065e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006b257600081815260208120601f850160051c810160208610156200068d5750805b601f850160051c820191505b81811015620006ae5782815560010162000699565b5050505b505050565b81516001600160401b03811115620006d357620006d3620002d0565b620006eb81620006e4845462000628565b8462000664565b602080601f8311600181146200072357600084156200070a5750858301515b600019600386901b1c1916600185901b178555620006ae565b600085815260208120601f198616915b82811015620007545788860151825594840194600190910190840162000733565b5085821015620007735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008219821115620007a557634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e051610100516129be62000851600039600081816108bc0152610ff40152600061181501526000818161048e01528181610b3d015261183f01526000818161029d0152818161045d0152818161063a0152818161098e01528181610c4e0152818161105101528181611116015281816111b201526111f301526000818161039b015281816104c401528181610ad6015261102b01526129be6000f3fe6080604052600436106101d85760003560e01c80636d4ce63c1161010257806395d89b4111610095578063d45bec7c11610064578063d45bec7c14610590578063e8a3d485146105a7578063e985e9c5146105bc578063f2fde38b1461060557600080fd5b806395d89b411461051b578063a22cb46514610530578063b88d4fde14610550578063c87b56dd1461057057600080fd5b80637a5caab3116100d15780637a5caab31461047f5780637f05c77a146104b25780638c4963ac146104e65780638da5cb5b146104fd57600080fd5b80636d4ce63c146103f457806370a0823114610416578063715018a61461043657806375abedcf1461044b57600080fd5b806323b872dd1161017a57806342966c681161014957806342966c681461036c5780635b92ac0d1461038c5780636352211e146103c15780636a627842146103e157600080fd5b806323b872dd146103025780632fbc0bf1146103225780633ccfd60b1461033757806342842e0e1461034c57600080fd5b8063095ea7b3116101b6578063095ea7b31461026c5780630fb50c261461028e57806318160ddd146102c35780631919fed7146102e257600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611e71565b610625565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610636565b6040516102099190611eed565b34801561024057600080fd5b5061025461024f366004611f00565b61071e565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c610287366004611f30565b610745565b005b34801561029a57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000042106101fd565b3480156102cf57600080fd5b506013545b604051908152602001610209565b3480156102ee57600080fd5b5061028c6102fd366004611f00565b610864565b34801561030e57600080fd5b5061028c61031d366004611f5a565b610871565b34801561032e57600080fd5b50600c546102d4565b34801561034357600080fd5b5061028c6108a2565b34801561035857600080fd5b5061028c610367366004611f5a565b610971565b34801561037857600080fd5b5061028c610387366004611f00565b61098c565b34801561039857600080fd5b507f000000000000000000000000000000000000000000000000000000000000000042106101fd565b3480156103cd57600080fd5b506102546103dc366004611f00565b610a1b565b6102d46103ef366004611f96565b610a7b565b34801561040057600080fd5b50610409610bed565b6040516102099190611fb1565b34801561042257600080fd5b506102d4610431366004611f96565b611078565b34801561044257600080fd5b5061028c6110fe565b34801561045757600080fd5b506102d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102d4565b3480156104be57600080fd5b506102d47f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f257600080fd5b506102d46201518081565b34801561050957600080fd5b506006546001600160a01b0316610254565b34801561052757600080fd5b50610227611112565b34801561053c57600080fd5b5061028c61054b3660046120ae565b61116b565b34801561055c57600080fd5b5061028c61056b366004612100565b611176565b34801561057c57600080fd5b5061022761058b366004611f00565b6111ae565b34801561059c57600080fd5b506102d46202a30081565b3480156105b357600080fd5b506102276111ef565b3480156105c857600080fd5b506101fd6105d73660046121dc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561061157600080fd5b5061028c610620366004611f96565b611229565b6000610630826112a2565b92915050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156106f057600a805461066d9061220f565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061220f565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b5050505050905090565b5060408051808201909152601081526f045787069726564204e465420536e61760841b602082015290565b90565b6000610729826112f2565b506000908152600460205260409020546001600160a01b031690565b600061075082610a1b565b9050806001600160a01b0316836001600160a01b0316036107c25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806107de57506107de81336105d7565b6108505760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107b9565b61085a8383611351565b505050565b905090565b61086c6113bf565b600c55565b61087b3382611419565b6108975760405162461bcd60e51b81526004016107b990612249565b61085a838383611498565b6108aa6113bf565b60405147906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083908381818185875af1925050503d8060008114610917576040519150601f19603f3d011682016040523d82523d6000602084013e61091c565b606091505b505090508061096d5760405162461bcd60e51b815260206004820152601c60248201527f4e4654536e61703a66756e64732d72656c656173652d6661696c65640000000060448201526064016107b9565b5050565b61085a83838360405180602001604052806000815250611176565b7f00000000000000000000000000000000000000000000000000000000000000004210156109fc5760405162461bcd60e51b815260206004820152601960248201527f4e4654536e61703a756e617574686f72697a65642d6275726e0000000000000060448201526064016107b9565b610a0581611634565b601360008154610a14906122ad565b9091555050565b6000818152600260205260408120546001600160a01b0316806106305760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107b9565b6000600260075403610acf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107b9565b60026007557f00000000000000000000000000000000000000000000000000000000000000004210610b3b5760405162461bcd60e51b815260206004820152601560248201527413919514db985c0e9b5a5b9d1a5b99cb595b991959605a1b60448201526064016107b9565b7f0000000000000000000000000000000000000000000000000000000000000000600c54610b6991906122c4565b341015610bb85760405162461bcd60e51b815260206004820152601b60248201527f4e4654536e61703a696e73756666696369656e742d616d6f756e74000000000060448201526064016107b9565b6000601360008154610bc9906122dc565b91829055509050610bda83826116cf565b610be2611811565b600160075592915050565b610c4c60405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b7f000000000000000000000000000000000000000000000000000000000000000042101561071b57604051806101400160405280600d6000018054610c909061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbc9061220f565b8015610d095780601f10610cde57610100808354040283529160200191610d09565b820191906000526020600020905b815481529060010190602001808311610cec57829003601f168201915b50505050508152602001600d6001018054610d239061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4f9061220f565b8015610d9c5780601f10610d7157610100808354040283529160200191610d9c565b820191906000526020600020905b815481529060010190602001808311610d7f57829003601f168201915b50505050508152602001600d6002018054610db69061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610de29061220f565b8015610e2f5780601f10610e0457610100808354040283529160200191610e2f565b820191906000526020600020905b815481529060010190602001808311610e1257829003601f168201915b50505050508152602001600d6003018054610e499061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e759061220f565b8015610ec25780601f10610e9757610100808354040283529160200191610ec2565b820191906000526020600020905b815481529060010190602001808311610ea557829003601f168201915b50505050508152602001600d6004018054610edc9061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f089061220f565b8015610f555780601f10610f2a57610100808354040283529160200191610f55565b820191906000526020600020905b815481529060010190602001808311610f3857829003601f168201915b50505050508152602001600d6005018054610f6f9061220f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9b9061220f565b8015610fe85780601f10610fbd57610100808354040283529160200191610fe8565b820191906000526020600020905b815481529060010190602001808311610fcb57829003601f168201915b505050505081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600c5481526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250905090565b60006001600160a01b0382166110e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107b9565b506001600160a01b031660009081526003602052604090205490565b6111066113bf565b61111060006118f4565b565b60607f000000000000000000000000000000000000000000000000000000000000000042101561114957600b805461066d9061220f565b5060408051808201909152600781526604e4654534e41560cc1b602082015290565b61096d338383611946565b6111803383611419565b61119c5760405162461bcd60e51b81526004016107b990612249565b6111a884848484611a14565b50505050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156111e15761063082611a47565b61063082611ac5565b919050565b60607f00000000000000000000000000000000000000000000000000000000000000004210156112215761085f611ae6565b61085f611b32565b6112316113bf565b6001600160a01b0381166112965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107b9565b61129f816118f4565b50565b60006001600160e01b031982166380ac58cd60e01b14806112d357506001600160e01b03198216635b5e139f60e01b145b8061063057506301ffc9a760e01b6001600160e01b0319831614610630565b6000818152600260205260409020546001600160a01b031661129f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107b9565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061138682610a1b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b031633146111105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107b9565b60008061142583610a1b565b9050806001600160a01b0316846001600160a01b0316148061146c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806114905750836001600160a01b03166114858461071e565b6001600160a01b0316145b949350505050565b826001600160a01b03166114ab82610a1b565b6001600160a01b03161461150f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107b9565b6001600160a01b0382166115715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107b9565b61157c600082611351565b6001600160a01b03831660009081526003602052604081208054600192906115a59084906122f5565b90915550506001600160a01b03821660009081526003602052604081208054600192906115d39084906122c4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061163f82610a1b565b905061164c600083611351565b6001600160a01b03811660009081526003602052604081208054600192906116759084906122f5565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166117255760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107b9565b6000818152600260205260409020546001600160a01b03161561178a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107b9565b6001600160a01b03821660009081526003602052604081208054600192906117b39084906122c4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000060405160006040518083038185875af1925050503d806000811461189e576040519150601f19603f3d011682016040523d82523d6000602084013e6118a3565b606091505b505090508061129f5760405162461bcd60e51b815260206004820152601f60248201527f4e4654536e61703a6d696e742d6665652d72656c656173652d6661696c65640060448201526064016107b9565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036119a75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107b9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a1f848484611498565b611a2b84848484611b51565b6111a85760405162461bcd60e51b81526004016107b99061230c565b6060611a9f600d611a5784611c52565b604051602001611a689291906123fb565b60408051601f1981840301815290829052611a8b91600e90600890602001612436565b604051602081830303815290604052611d53565b604051602001611aaf91906124e7565b6040516020818303038152906040529050919050565b6060611a9f611ad383611c52565b6009604051602001611a8b92919061252c565b604051606090611b0e90611a8b90600d90600e90600f906010906011906012906020016125ee565b604051602001611b1e91906124e7565b604051602081830303815290604052905090565b604051606090611b0e90611a8b90600990601190601290602001612761565b60006001600160a01b0384163b15611c4757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b959033908990889088906004016128da565b6020604051808303816000875af1925050508015611bd0575060408051601f3d908101601f19168201909252611bcd91810190612917565b60015b611c2d573d808015611bfe576040519150601f19603f3d011682016040523d82523d6000602084013e611c03565b606091505b508051600003611c255760405162461bcd60e51b81526004016107b99061230c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611490565b506001949350505050565b606081600003611c795750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ca35780611c8d816122dc565b9150611c9c9050600a8361294a565b9150611c7d565b60008167ffffffffffffffff811115611cbe57611cbe6120ea565b6040519080825280601f01601f191660200182016040528015611ce8576020820181803683370190505b5090505b841561149057611cfd6001836122f5565b9150611d0a600a8661295e565b611d159060306122c4565b60f81b818381518110611d2a57611d2a612972565b60200101906001600160f81b031916908160001a905350611d4c600a8661294a565b9450611cec565b606061063082600080606083518015611e53576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b6003880197508751603f8160121c16518353603f81600c1c16516001840153603f8160061c16516002840153603f811651600384015350600482019150808210611dcc5760038406868015611e2c57600182148215150185038752611e44565b603d821515850353603d6001831460011b8503538487525b5050601f01601f191660405250505b509392505050565b6001600160e01b03198116811461129f57600080fd5b600060208284031215611e8357600080fd5b8135611e8e81611e5b565b9392505050565b60005b83811015611eb0578181015183820152602001611e98565b838111156111a85750506000910152565b60008151808452611ed9816020860160208601611e95565b601f01601f19169290920160200192915050565b602081526000611e8e6020830184611ec1565b600060208284031215611f1257600080fd5b5035919050565b80356001600160a01b03811681146111ea57600080fd5b60008060408385031215611f4357600080fd5b611f4c83611f19565b946020939093013593505050565b600080600060608486031215611f6f57600080fd5b611f7884611f19565b9250611f8660208501611f19565b9150604084013590509250925092565b600060208284031215611fa857600080fd5b611e8e82611f19565b6020815260008251610140806020850152611fd0610160850183611ec1565b91506020850151601f1980868503016040870152611fee8483611ec1565b9350604087015191508086850301606087015261200b8483611ec1565b935060608701519150808685030160808701526120288483611ec1565b935060808701519150808685030160a08701526120458483611ec1565b935060a08701519150808685030160c0870152506120638382611ec1565b92505060c085015161208060e08601826001600160a01b03169052565b5060e08501516101008581019190915285015161012080860191909152909401519390920192909252919050565b600080604083850312156120c157600080fd5b6120ca83611f19565b9150602083013580151581146120df57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561211657600080fd5b61211f85611f19565b935061212d60208601611f19565b925060408501359150606085013567ffffffffffffffff8082111561215157600080fd5b818701915087601f83011261216557600080fd5b813581811115612177576121776120ea565b604051601f8201601f19908116603f0116810190838211818310171561219f5761219f6120ea565b816040528281528a60208487010111156121b857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156121ef57600080fd5b6121f883611f19565b915061220660208401611f19565b90509250929050565b600181811c9082168061222357607f821691505b60208210810361224357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816122bc576122bc612297565b506000190190565b600082198211156122d7576122d7612297565b500190565b6000600182016122ee576122ee612297565b5060010190565b60008282101561230757612307612297565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061237857607f831692505b6020808410820361239957634e487b7160e01b600052602260045260246000fd5b8180156123ad57600181146123c2576123ef565b60ff19861689528415158502890196506123ef565b60008881526020902060005b868110156123e75781548b8201529085019083016123ce565b505084890196505b50505050505092915050565b6000612407828561235e565b600160fd1b81528351612421816001840160208801611e95565b01600101949350505050565b601160f91b9052565b673d913730b6b2911d60c11b8152601160f91b60088201819052845160009190612467816009860160208a01611e95565b61088b60f21b60099185019182018190526d113232b9b1b934b83a34b7b7111d60911b600b830152601982018390526124a3601a83018861235e565b908152671134b6b0b3b2911d60c11b6002820152600a810183905290506124cd600b82018661235e565b91825250607d60f81b600182015260020195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161251f81601d850160208701611e95565b91909101601d0192915050565b673d913730b6b2911d60c11b8152601160f91b6008820181905283516000919061255d816009860160208901611e95565b61088b60f21b60099185019182018190526d113232b9b1b934b83a34b7b7111d60911b600b83015260198201839052623f3f3f60e81b601a830152601d8201526125b4601f8201671134b6b0b3b2911d60c11b9052565b6125c06027820161242d565b6125cd602882018661235e565b9150506125d98161242d565b607d60f81b6001820152600201949350505050565b673d913730b6b2911d60c11b81526126086008820161242d565b6000612617600983018961235e565b61088b60f21b8152600261263d8183016d113232b9b1b934b83a34b7b7111d60911b9052565b6126496010830161242d565b612656601183018a61235e565b61088b60f21b81529150671134b6b0b3b2911d60c11b8282015261267c600a830161242d565b612689600b83018961235e565b61088b60f21b815291506e1132bc3a32b93730b62634b735911d60891b828201526126b66011830161242d565b6126c3601283018861235e565b61088b60f21b81529150761139b2b63632b92332b2a130b9b4b9a837b4b73a39911d60491b828201526126f86019830161242d565b612705601a83018761235e565b61088b60f21b815291506e113332b2a932b1b4b834b2b73a111d60891b828201526127326011830161242d565b61273f601283018661235e565b915061274a8261242d565b607d60f81b60018301520198975050505050505050565b673d913730b6b2911d60c11b815261277b6008820161242d565b71115e1c1a5c9959081391950814db985c088b60721b60098201526d113232b9b1b934b83a34b7b7111d60911b601b8201526127b96029820161242d565b640fcfcfc88b60da1b602a820152671134b6b0b3b2911d60c11b602f8201526127e46037820161242d565b60006127f3603883018661235e565b61088b60f21b81526e1132bc3a32b93730b62634b735911d60891b600282015261281f6011820161242d565b7f68747470733a2f2f6e6674736e6170732e78797a2f222c0000000000000000006012820152761139b2b63632b92332b2a130b9b4b9a837b4b73a39911d60491b60298201526128716040820161242d565b61287e604182018661235e565b61088b60f21b815290506e113332b2a932b1b4b834b2b73a111d60891b60028201526128ac6011820161242d565b6128b9601282018561235e565b90506128c48161242d565b607d60f81b600182015260020195945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061290d90830184611ec1565b9695505050505050565b60006020828403121561292957600080fd5b8151611e8e81611e5b565b634e487b7160e01b600052601260045260246000fd5b60008261295957612959612934565b500490565b60008261296d5761296d612934565b500690565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220139f969faf75eb9551d0b9d9769e19d2d4865f91f58f7042647e730d841e0cfa64736f6c634300080f0033a2646970667358221220bffbd12b086d4f88c979175eeb54b78c1dbef7795338ebb2be6a378fe262a7cc64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2412,
        "contract": "contracts/SnapFactory.sol:SnapFactory",
        "label": "snapsMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2416,
        "contract": "contracts/SnapFactory.sol:SnapFactory",
        "label": "snapsList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}